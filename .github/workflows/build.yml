name: publish

on:
  push:
    branches: [main]

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: "--target aarch64-apple-darwin --bundles app"
          - platform: macos-latest
            args: "--target x86_64-apple-darwin --bundles app"
          - platform: ubuntu-22.04
            args: ""
          - platform: windows-latest
            args: ""
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Linux deps (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev \
            libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend deps
        run: pnpm install --frozen-lockfile

      # ---------- macOS signing ----------
      - name: Import Apple Developer certificate
        if: runner.os == 'macOS'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          CERT_PATH="$RUNNER_TEMP/certificate.p12"
          echo "$APPLE_CERTIFICATE" | base64 --decode > "$CERT_PATH"
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 3600 build.keychain
          security import "$CERT_PATH" -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          CERT_ID=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | awk -F'"' '{print $2}')
          echo "APPLE_SIGNING_IDENTITY=$CERT_ID" >> $GITHUB_ENV

      # ---------- Windows signing (DigiCert KeyLocker + SignTool) ----------
      - name: Install DigiCert client tools (KSP/SMCTL)
        if: runner.os == 'Windows'
        uses: digicert/ssm-code-signing@v1.1.0

      - name: Write DigiCert client-auth cert (.p12)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          [IO.File]::WriteAllBytes('D:\sm_client_auth.p12',
            [Convert]::FromBase64String('${{ secrets.SM_CLIENT_CERT_FILE_B64 }}'))

      - name: Configure DigiCert env
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          SM_HOST: ${{ secrets.SM_HOST }}
          SM_API_KEY: ${{ secrets.SM_API_KEY }}
          SM_CLIENT_CERT_FILE: D:\sm_client_auth.p12
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
        run: |
          "SM_HOST=$env:SM_HOST" | Out-File -Append -FilePath $env:GITHUB_ENV
          "SM_API_KEY=$env:SM_API_KEY" | Out-File -Append -FilePath $env:GITHUB_ENV
          "SM_CLIENT_CERT_FILE=$env:SM_CLIENT_CERT_FILE" | Out-File -Append -FilePath $env:GITHUB_ENV
          "SM_CLIENT_CERT_PASSWORD=$env:SM_CLIENT_CERT_PASSWORD" | Out-File -Append -FilePath $env:GITHUB_ENV

      - name: Sync KeyLocker cert to CurrentUser\My (by alias) & verify
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          KEYPAIR_ALIAS: ${{ secrets.KEYPAIR_ALIAS }}   # set this secret from DigiCert portal (Keypairs)
        run: |
          if ([string]::IsNullOrWhiteSpace($env:KEYPAIR_ALIAS)) { Write-Error "KEYPAIR_ALIAS secret not set"; exit 1 }

          smctl windows certsync --keypair-alias "$env:KEYPAIR_ALIAS" --store user --reset

          $thumb = 'b75c98e57155c621d8e945864332ec5e41046318'
          $c = Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Thumbprint -ieq $thumb }
          if (-not $c) { Write-Error "Thumbprint $thumb not found in CurrentUser\My after certsync"; exit 1 }
          if (-not $c.HasPrivateKey) { Write-Error "Cert $thumb is present but has NO private key"; exit 1 }

      - name: Ensure SignTool on PATH & sanity-check
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Prefer the newest Windows SDK bin\x64 folder
          $binRoot = 'C:\Program Files (x86)\Windows Kits\10\bin'
          $latest = Get-ChildItem $binRoot -Directory | Sort-Object Name -Descending | Select-Object -First 1
          if ($latest) { "$($latest.FullName)\x64" | Out-File -Append -FilePath $env:GITHUB_PATH }

          # Show mapped tools so we know the path is good
          smctl healthcheck --tools

          # Prove we can launch signtool (spawning check)
          signtool /? | Out-Null

      # ---------- Build & release ----------
      - name: Build & release with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # macOS signing & notarization
          APPLE_SIGNING_IDENTITY: ${{ env.APPLE_SIGNING_IDENTITY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}

          # Tauri updater signature (if used)
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Cleanup macOS keychain
        if: runner.os == 'macOS'
        run: security delete-keychain build.keychain

      - name: Verify Windows signatures (optional)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          signtool verify /pa /v "src-tauri/target/release/labric-sync-tauri.exe"
          signtool verify /pa /v "src-tauri/target/release/bundle/msi/Labric Sync_0.1.5_x64_en-US.msi"
          signtool verify /pa /v "src-tauri/target/release/bundle/nsis/Labric Sync_0.1.5_x64-setup.exe"
